{
 "Resources": {
  "LambdaS3RoleA024665D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AdministratorAccess"
       ]
      ]
     }
    ],
    "RoleName": "LambdaS3Role"
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/LambdaS3Role/Resource"
   }
  },
  "LambdaS365175FCC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-619831221558-ap-southeast-2",
     "S3Key": "e5e4791ece0caede2b7939149f59a3c28a3c76b2344af6501233ef9b30eb3e0b.zip"
    },
    "FunctionName": "LambdaS3",
    "Handler": "lambda_function.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaS3RoleA024665D",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 300
   },
   "DependsOn": [
    "LambdaS3RoleA024665D"
   ],
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/LambdaS3/Resource",
    "aws:asset:path": "asset.e5e4791ece0caede2b7939149f59a3c28a3c76b2344af6501233ef9b30eb3e0b",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaS3InvokePermissionFB12B681": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "*",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaS365175FCC",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": "arn:aws:events:eu-central-1:619831221558:rule/RuleToTriggerLambdaFunctionWhenS3BucketCreatedInWrongRegion"
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/LambdaS3/InvokePermission"
   }
  },
  "s3trailforbucketcreation26B62A46": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3trailforbucketcreation/Resource"
   }
  },
  "s3trailforbucketcreationPolicy72E04FAD": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "s3trailforbucketcreation26B62A46"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3trailforbucketcreation26B62A46",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3trailforbucketcreation26B62A46",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetBucketAcl",
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "s3trailforbucketcreation26B62A46",
         "Arn"
        ]
       }
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "StringEquals": {
         "s3:x-amz-acl": "bucket-owner-full-control"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "s3trailforbucketcreation26B62A46",
            "Arn"
           ]
          },
          "/AWSLogs/619831221558/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3trailforbucketcreation/Policy/Resource"
   }
  },
  "s3trailforbucketcreationAutoDeleteObjectsCustomResourceC65850DB": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "s3trailforbucketcreation26B62A46"
    }
   },
   "DependsOn": [
    "s3trailforbucketcreationPolicy72E04FAD"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3trailforbucketcreation/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "s3trailforbucketcreationNotifications66EF531E": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "s3trailforbucketcreation26B62A46"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3trailforbucketcreation/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-619831221558-ap-southeast-2",
     "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "s3trailforbucketcreation26B62A46"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6",
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "loggroup98B39ABC": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "loggroup-s3trail",
    "RetentionInDays": 1
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/loggroup/Resource"
   }
  },
  "cloudtrailtrailforbucketcreationLogsRole71FDF2A3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/cloudtrailtrailforbucketcreation/LogsRole/Resource"
   }
  },
  "cloudtrailtrailforbucketcreationLogsRoleDefaultPolicy5010E2FB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "loggroup98B39ABC",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "cloudtrailtrailforbucketcreationLogsRoleDefaultPolicy5010E2FB",
    "Roles": [
     {
      "Ref": "cloudtrailtrailforbucketcreationLogsRole71FDF2A3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/cloudtrailtrailforbucketcreation/LogsRole/DefaultPolicy/Resource"
   }
  },
  "cloudtrailtrailforbucketcreation399E7BCE": {
   "Type": "AWS::CloudTrail::Trail",
   "Properties": {
    "CloudWatchLogsLogGroupArn": {
     "Fn::GetAtt": [
      "loggroup98B39ABC",
      "Arn"
     ]
    },
    "CloudWatchLogsRoleArn": {
     "Fn::GetAtt": [
      "cloudtrailtrailforbucketcreationLogsRole71FDF2A3",
      "Arn"
     ]
    },
    "EnableLogFileValidation": true,
    "EventSelectors": [
     {
      "DataResources": [
       {
        "Type": "AWS::S3::Object",
        "Values": [
         {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "s3trailforbucketcreation26B62A46",
              "Arn"
             ]
            },
            "/"
           ]
          ]
         }
        ]
       }
      ],
      "ExcludeManagementEventSources": [
       "kms.amazonaws.com",
       "rdsdata.amazonaws.com"
      ],
      "IncludeManagementEvents": true,
      "ReadWriteType": "All"
     }
    ],
    "IncludeGlobalServiceEvents": true,
    "IsLogging": true,
    "IsMultiRegionTrail": true,
    "S3BucketName": {
     "Ref": "s3trailforbucketcreation26B62A46"
    },
    "TrailName": "CustomCloudTrail"
   },
   "DependsOn": [
    "cloudtrailtrailforbucketcreationLogsRoleDefaultPolicy5010E2FB",
    "cloudtrailtrailforbucketcreationLogsRole71FDF2A3",
    "s3trailforbucketcreationPolicy72E04FAD"
   ],
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/cloudtrailtrailforbucketcreation/Resource"
   }
  },
  "s3deleteRule3DEB79FC": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Rule to trigger lambda function",
    "EventPattern": {
     "detail": {
      "eventSource": [
       "s3.amazonaws.com"
      ],
      "eventName": [
       "CreateBucket"
      ]
     },
     "detail-type": [
      "AWS API Call via CloudTrail"
     ],
     "source": [
      "aws.s3"
     ]
    },
    "Name": "RuleToTriggerLambdaFunctionWhenS3BucketCreatedInWrongRegion",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "LambdaS365175FCC",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3deleteRule/Resource"
   }
  },
  "s3deleteRuleAllowEventRuleLambdaLayersStackapsoutheast2LambdaS350B46AA9BB8BC2EC": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaS365175FCC",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "s3deleteRule3DEB79FC",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/s3deleteRule/AllowEventRuleLambdaLayersStackapsoutheast2LambdaS350B46AA9"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WQTU7DMBCFz9L9dID0BLQSbJCIAvvKdUwY4ngqj11UWb47dlJKWb3v+Y01Pw0+NA3er9S3rHU/ri0dML0FpUcoT/tEasLUsTWw+3CztmxJn6tdKINV06FXmJ6i04HY1eyWW+MnEikug2z2SsQEwccqxWPaRj2asFViYMH66UKL/PW89aUzD4LphYdnz/FY81/OoC3HPnhFFtN7lRrPkMGcjCsjpC5eFiuaM3RGOHptYJ6tXGEgN8AuSuDpmtXyK/+LWs8n6o2fNyllrzEcY8jQnsMnu7tNOTU2qy8hWvvoAk0Gu0V/AGBbsPeGAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "LambdaLayersStack-ap-southeast-2/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "Lambdaname": {
   "Description": "LambdaS3",
   "Value": {
    "Ref": "LambdaS365175FCC"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}